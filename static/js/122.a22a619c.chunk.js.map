{"version":3,"file":"static/js/122.a22a619c.chunk.js","mappings":"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","sources":["components/heroes/heroes.js","components/intro/intro.js","components/skeleton/skeleton.js","components/hero-banner/hero-banner.js","components/hero-search/hero-search.js","components/pages/MainPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\n\r\nimport \"./heroes.scss\";\r\nimport ErrorMessage from \"../error/error\";\r\nimport Spinner from \"../spinner/spinner\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\n\r\nconst HeroList = (props) => {\r\n  const [heroList, setHeroList] = useState([]);\r\n  const [newItemLoading, setnewItemLoading] = useState(false);\r\n  const [offset, setOffset] = useState(210);\r\n  const [heroEnded, setHeroEnded] = useState(false);\r\n\r\n  const { loading, error, getAllCharacters } = useMarvelService();\r\n\r\n  const itemRefs = useRef([]); // Создаем рефы заранее\r\n\r\n  useEffect(() => {\r\n    onRequest(offset, true);\r\n  }, []);\r\n\r\n  const onRequest = (offset, init) => {\r\n    init ? setnewItemLoading(false) : setnewItemLoading(true);\r\n    getAllCharacters(offset).then(onHeroListLoaded);\r\n  };\r\n\r\n  const onHeroListLoaded = (newHeroList) => {\r\n    let ended = false;\r\n    if (newHeroList.length < 9) {\r\n      ended = true;\r\n    }\r\n\r\n    setHeroList((heroList) => [...heroList, ...newHeroList]);\r\n    setnewItemLoading(false);\r\n    setOffset((offset) => offset + 9);\r\n    setHeroEnded(ended);\r\n  };\r\n\r\n  const focusOnItem = (id) => {\r\n    itemRefs.current.forEach((item) => {\r\n      if (item) {\r\n        item.classList.remove(\"char__item_selected\");\r\n      }\r\n    });\r\n\r\n    if (itemRefs.current[id]) {\r\n      itemRefs.current[id].classList.add(\"char__item_selected\");\r\n      itemRefs.current[id].focus();\r\n    }\r\n  };\r\n\r\n  function renderItems(arr) {\r\n    const items = arr.map((item, i) => {\r\n      let imgStyle = { objectFit: \"cover\" };\r\n      if (\r\n        item.thumbnail ===\r\n        \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\r\n      ) {\r\n        imgStyle = { objectFit: \"unset\" };\r\n      }\r\n\r\n      return (\r\n        <CSSTransition\r\n          key={item.id}\r\n          timeout={300}\r\n          classNames=\"hero\"\r\n        >\r\n          <li\r\n            ref={(el) => {\r\n              itemRefs.current[i] = el; // Используем реф для каждого элемента\r\n            }}\r\n            className=\"char__item\"\r\n            tabIndex={0}\r\n            onClick={() => {\r\n              props.onHeroSelected(item.id);\r\n              focusOnItem(i);\r\n            }}\r\n            onKeyPress={(e) => {\r\n              if (e.key === \" \" || e.key === \"Enter\") {\r\n                props.onHeroSelected(item.id);\r\n                focusOnItem(i);\r\n              }\r\n            }}\r\n          >\r\n            <img src={item.thumbnail} alt={item.name} style={imgStyle} />\r\n            <div className=\"char__name\">{item.name}</div>\r\n          </li>\r\n        </CSSTransition>\r\n      );\r\n    });\r\n    return <TransitionGroup component=\"ul\" className=\"char__grid\">{items}</TransitionGroup>;\r\n  }\r\n\r\n  const items = renderItems(heroList);\r\n\r\n  const errorMessage = error ? <ErrorMessage /> : null;\r\n  const spinner = loading && !newItemLoading ? <Spinner /> : null;\r\n\r\n  return (\r\n    <div className=\"char__list\">\r\n      {errorMessage}\r\n      {spinner}\r\n      {items}\r\n      <button\r\n        className=\"btn btn--long\"\r\n        disabled={newItemLoading}\r\n        style={{ display: heroEnded ? \"none\" : \"flex\" }}\r\n        onClick={() => onRequest(offset)}\r\n      >\r\n        <div className=\"inner\">load more</div>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nHeroList.propTypes = {\r\n  onHeroSelected: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default HeroList;","import { useEffect, useState } from \"react\";\r\nimport \"./intro\";\r\nimport Spinner from \"../spinner/spinner\";\r\nimport ErrorMessage from \"../error/error\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\n\r\nconst Intro = () => {\r\n  const [hero, setHero] = useState(null);\r\n\r\n  const {loading, error, getCharacter, clearError} = useMarvelService();\r\n\r\n  useEffect(() => updateHero(), []);\r\n\r\n  const onHeroLoaded = (hero) => {\r\n    setHero(hero);\r\n  };\r\n\r\n  const updateHero = () => {\r\n    clearError()\r\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n    getCharacter(id).then(onHeroLoaded);\r\n  };\r\n\r\n  const errorMessage = error ? <ErrorMessage /> : null;\r\n  const spinner = loading ? <Spinner /> : null;\r\n  const content = !(loading || error) ? <View hero={hero} /> : null;\r\n\r\n  return (\r\n    <section className=\"intro\">\r\n      {errorMessage}\r\n      {spinner}\r\n      {content}\r\n      <div className=\"intro__static\">\r\n        <p>\r\n          Random character for today!\r\n          <br />\r\n          Do you want to get to know him better?\r\n        </p>\r\n        <p>Or choose another one</p>\r\n        <a href=\"#\" className=\"btn btn-red\" onClick={() => updateHero()}>\r\n          Try it\r\n        </a>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst View = ({ hero }) => {\r\n  if (!hero) return null;\r\n\r\n  const { name, description, thumbnail, homepage, wiki } = hero;\r\n  const isNotAvailable = thumbnail.includes(\"not_available\");\r\n\r\n  return (\r\n    <div className=\"intro__random\">\r\n      <img\r\n        src={thumbnail}\r\n        width=\"180\"\r\n        height=\"180\"\r\n        alt=\"hero\"\r\n        className={isNotAvailable ? \"not-available\" : \"\"}\r\n        data-hero-image\r\n      />\r\n      <div className=\"intro__descr\">\r\n        <h2 data-hero-name>{name}</h2>\r\n        <p data-hero-text>{description}</p>\r\n        <div className=\"intro__buttons\">\r\n          <a href={homepage} className=\"btn btn-red\">\r\n            Homepage\r\n          </a>\r\n          <a href={wiki} className=\"btn btn--grey\">\r\n            Wiki\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Intro;\r\n","import \"./skeleton.scss\";\r\n\r\nconst Skeleton = () => {\r\n  return (\r\n    <>\r\n      <h2 className=\"heroes__select\">\r\n        Please select a character to see information\r\n      </h2>\r\n      <div className=\"skeleton\">\r\n        <div className=\"pulse skeleton__header\">\r\n          <div className=\"pulse skeleton__circle\"></div>\r\n          <div className=\"pulse skeleton__mini\"></div>\r\n        </div>\r\n        <div className=\"pulse skeleton__block\"></div>\r\n        <div className=\"pulse skeleton__block\"></div>\r\n        <div className=\"pulse skeleton__block\"></div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Skeleton;\r\n","import { number } from \"prop-types\";\r\nimport { useEffect, useState } from \"react\";\r\nimport ErrorMessage from \"../error/error\";\r\nimport Skeleton from \"../skeleton/skeleton\";\r\nimport Spinner from \"../spinner/spinner\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst HeroBanner = (props) => {\r\n  const [hero, setHero] = useState(null);\r\n\r\n  const { loading, error, getCharacter, clearError } =\r\n    useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateHero();\r\n  }, [props.heroId]);\r\n\r\n  const onHeroLoaded = (hero) => {\r\n    setHero(hero);\r\n  };\r\n\r\n  const updateHero = () => {\r\n    clearError();\r\n    if (!props.heroId) {\r\n      return;\r\n    }\r\n\r\n    getCharacter(props.heroId).then(onHeroLoaded);\r\n  };\r\n\r\n  const skeleton = hero || loading || error ? null : <Skeleton />;\r\n  const errorMessage = error ? <ErrorMessage /> : null;\r\n  const spinner = loading ? <Spinner /> : null;\r\n  const content = !(loading || error || !hero) ? <View hero={hero} /> : null;\r\n\r\n  return (\r\n    <div className=\"heroes__info\">\r\n      {skeleton}\r\n      {errorMessage}\r\n      {spinner}\r\n      {content}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst View = ({ hero }) => {\r\n  const { name, description, thumbnail, homepage, wiki, comics } = hero;\r\n  \r\n  return (\r\n    <>\r\n      <div className=\"heroes__top\">\r\n        <img src={thumbnail} width={150} height={150} alt={name} />\r\n        <div className=\"hero__buttons\">\r\n          <h3>{name}</h3>\r\n          <a href={homepage} className=\"btn btn-red\">\r\n            Homepage\r\n          </a>\r\n          <a href={wiki} className=\"btn btn--grey\">\r\n            Wiki\r\n          </a>\r\n        </div>\r\n      </div>\r\n      <p>{description}</p>\r\n      <h4>Comics:</h4>\r\n      <ul>\r\n        {comics.length === 0\r\n          ? (<p>Unfortunately, we don't have data</p>)\r\n          : comics.map((item, i) => (\r\n              <NavLink to={`/comics/${item.resourceURI.match(/\\d+$/)[0]}`} key={i}>\r\n                {item.name}\r\n              </NavLink>\r\n            ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nHeroBanner.propTypes = {\r\n  heroId: number,\r\n};\r\n\r\nexport default HeroBanner;\r\n","import \"./hero-search.scss\";\r\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport * as Yup from \"yup\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst HeroSearch = () => {\r\n  const { getCharacterByName } = useMarvelService();\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [heroId, setHeroId] = useState(\"\");\r\n  const [errorMessageClass, setErrorMessageClass] = useState(\"\");\r\n  const [heroPageBtn, setHeroPageBtn] = useState(false);\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (inputValue === \"\") {\r\n      setErrorMessage(\"\");\r\n      setErrorMessageClass(\"\");\r\n      setHeroId(\"\");\r\n      setHeroPageBtn(false);\r\n    }\r\n  }, [inputValue]);\r\n\r\n  return (\r\n    <div className=\"heroes__info\">\r\n      <Formik\r\n        initialValues={{\r\n          name: \"\",\r\n        }}\r\n        validationSchema={Yup.object({\r\n          name: Yup.string()\r\n            .min(2, \"minimum 2 symbols\")\r\n            .required(\"This field is required\"),\r\n        })}\r\n        onSubmit={(value, { setSubmitting }) =>\r\n          getCharacterByName(value.name)\r\n            .then((heroData) => {\r\n              if (heroData) {\r\n                setErrorMessage(`There is! Visit ${value.name} page?`);\r\n                setErrorMessageClass(\"confirmed\");\r\n                setHeroId(heroData.id);\r\n                setHeroPageBtn(true);\r\n              } else {\r\n                setErrorMessage(\r\n                  \"The character was not found. Check the name and try again.\"\r\n                );\r\n                setErrorMessageClass(\"\");\r\n                setHeroId(\"\");\r\n                setHeroPageBtn(false);\r\n              }\r\n            })\r\n            .catch(() => {\r\n              setErrorMessage(\"An error occurred. Please try again later.\");\r\n            })\r\n            .finally(() => {\r\n              setSubmitting(false);\r\n            })\r\n        }\r\n      >\r\n        {({ isSubmitting, handleChange, values }) => (\r\n          <Form className=\"heroes__form\">\r\n            <h2 className=\"heroes__search\">Or find a character by name:</h2>\r\n            <div className=\"heroes__search-field\">\r\n              <label htmlFor=\"name\">\r\n                <Field\r\n                  id=\"name\"\r\n                  name=\"name\"\r\n                  type=\"text\"\r\n                  placeholder=\"Enter name\"\r\n                  value={values.name}\r\n                  onChange={(e) => {\r\n                    handleChange(e);\r\n                    setInputValue(e.target.value);\r\n                  }}\r\n                />\r\n              </label>\r\n              <button\r\n                className=\"btn btn-red\"\r\n                type=\"submit\"\r\n                disabled={isSubmitting}\r\n              >\r\n                Find\r\n              </button>\r\n            </div>\r\n            <div className=\"heroes__search-bottom\">\r\n              {errorMessage && (\r\n                <div className={`heroes__error ${errorMessageClass}`}>\r\n                  {errorMessage}\r\n                </div>\r\n              )}\r\n              <ErrorMessage\r\n                className=\"heroes__error\"\r\n                name=\"name\"\r\n                component=\"div\"\r\n              />\r\n              {heroPageBtn ? (\r\n                <NavLink className=\"btn btn--grey\" to={`/hero/${heroId}`}>\r\n                  To Page\r\n                </NavLink>\r\n              ) : null}\r\n            </div>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HeroSearch;\r\n","import { useState } from \"react\";\r\n\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport Heroes from \"../heroes/heroes\";\r\nimport Intro from \"../intro/intro\";\r\nimport HeroBanner from \"../hero-banner/hero-banner\";\r\nimport HeroSearch from \"../hero-search/hero-search\";\r\n\r\nconst MainPage = () => {\r\n  const [selectedHero, setHero] = useState(null);\r\n\r\n  const onHeroSelected = (id) => {\r\n    setHero(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ErrorBoundary>\r\n        <Intro />\r\n      </ErrorBoundary>\r\n      <section className=\"heroes\">\r\n        <ErrorBoundary>\r\n          <Heroes onHeroSelected={onHeroSelected} />\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <div className=\"heroes__side\">\r\n            <HeroBanner heroId={selectedHero} />\r\n            <HeroSearch />\r\n          </div>\r\n        </ErrorBoundary>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import { useCallback, useState } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = \"GET\",\r\n      body = null,\r\n      headers = { \"Content-Type\": \"application/json\" }\r\n    ) => {\r\n      setLoading(true);\r\n      try {\r\n        const response = await fetch(url, { method, headers, body });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`couldnt fetch ${url}, status ${response.status}`);\r\n        }\r\n\r\n        const data = response.json();\r\n\r\n        setLoading(false);\r\n        return data;\r\n        \r\n      } catch (e) {\r\n        setLoading(false);\r\n        setError(e.message);\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => setError(null), []);\r\n\r\n  return { loading, request, error, clearError };\r\n};\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { loading, error, request, clearError } = useHttp();\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const _apiKey = \"apikey=ff64a0784b5d6e42a6564ae4ba4b8975\";\r\n  const _baseOffset = 210;\r\n  const _comicsOffset = 50;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(\r\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformHero);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformHero(res.data.results[0]);\r\n  };\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`)\r\n    return _transformHero(res.data.results[0])\r\n  }\r\n\r\n  const _transformHero = (hero) => {\r\n    return {\r\n      id: hero.id,\r\n      name: hero.name,\r\n      description:\r\n        hero.description ||\r\n        \"unfortunatly, this hero still hasnt his own description...\",\r\n      thumbnail: hero.thumbnail.path + \".\" + hero.thumbnail.extension || '',\r\n      homepage: hero.urls[0].url,\r\n      wiki: hero.urls[1].url,\r\n      comics: hero.comics.items.slice(0, 10),\r\n    };\r\n  };\r\n\r\n  const getComicsId = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const getAllComics = async (offset = _comicsOffset) => {\r\n    const res = await request(\r\n      `${_apiBase}comics?&limit=8&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n      price: comics.prices.price\r\n        ? `${comics.prices[0].price}$`\r\n        : \"not available\",\r\n      language: comics.textObjects.language || \"en-us\",\r\n      pageCount: comics.pageCount ? `${comics.pageCount} p.` : \"No info\",\r\n      description: comics.description || \"No info\",\r\n    };\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    getCharacter,\r\n    getAllCharacters,\r\n    clearError,\r\n    getAllComics,\r\n    getComicsId,\r\n    getCharacterByName\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n"],"names":["props","heroList","setHeroList","useState","newItemLoading","setnewItemLoading","offset","setOffset","heroEnded","setHeroEnded","loading","error","getAllCharacters","useMarvelService","itemRefs","useRef","useEffect","onRequest","init","then","onHeroListLoaded","newHeroList","ended","length","focusOnItem","id","current","forEach","item","classList","remove","add","focus","items","arr","map","i","imgStyle","objectFit","thumbnail","_jsx","CSSTransition","timeout","classNames","children","_jsxs","ref","el","className","tabIndex","onClick","onHeroSelected","onKeyPress","e","key","src","alt","name","style","TransitionGroup","component","renderItems","errorMessage","ErrorMessage","spinner","Spinner","disabled","display","View","_ref","hero","description","homepage","wiki","isNotAvailable","includes","width","height","href","Intro","setHero","getCharacter","clearError","updateHero","onHeroLoaded","Math","floor","random","content","Skeleton","_Fragment","comics","NavLink","to","resourceURI","match","heroId","skeleton","HeroSearch","getCharacterByName","setErrorMessage","setHeroId","errorMessageClass","setErrorMessageClass","heroPageBtn","setHeroPageBtn","inputValue","setInputValue","Formik","initialValues","validationSchema","Yup","min","required","onSubmit","value","setSubmitting","heroData","catch","finally","_ref2","isSubmitting","handleChange","values","Form","htmlFor","Field","type","placeholder","onChange","target","MainPage","selectedHero","ErrorBoundary","Heroes","HeroBanner","request","useHttp","setLoading","setError","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","Error","status","data","json","message","_apiBase","_apiKey","_transformHero","path","extension","urls","slice","_transformComics","title","price","prices","language","textObjects","pageCount","res","results","getAllComics","getComicsId"],"sourceRoot":""}