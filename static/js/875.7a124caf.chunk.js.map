{"version":3,"file":"static/js/875.7a124caf.chunk.js","mappings":"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","sources":["components/pages/DataPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useParams, NavLink } from \"react-router-dom\";\r\nimport banner from \"../../images/banner.jpg\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport ErrorMessage from \"../error/error\";\r\nimport Spinner from \"../spinner/spinner\";\r\n\r\nconst DataPage = ({ type }) => {\r\n  const { id } = useParams();\r\n  const [data, setData] = useState(null);\r\n\r\n  const { loading, error, getComicsId, getCharacter, clearError } =\r\n    useMarvelService();\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      updateData();\r\n    }\r\n  }, [id]);\r\n\r\n  const onDataLoaded = (data) => {\r\n    setData(data);\r\n  };\r\n\r\n  const updateData = () => {\r\n    clearError();\r\n\r\n    if (!id) {\r\n      console.error(\"ID не найден. Пожалуйста, убедитесь, что URL корректен.\");\r\n      return;\r\n    }\r\n\r\n    if (type === \"comic\") {\r\n      getComicsId(id)\r\n        .then(onDataLoaded)\r\n        .catch((err) => {\r\n          console.error(\"Ошибка при загрузке комикса:\", err);\r\n        });\r\n    } else if (type === \"hero\") {\r\n      getCharacter(id)\r\n        .then(onDataLoaded)\r\n        .catch((err) => {\r\n          console.error(\"Ошибка при загрузке героя:\", err);\r\n        });\r\n    }\r\n  };\r\n\r\n  const errorMessage = error ? <ErrorMessage /> : null;\r\n  const spinner = loading ? <Spinner /> : null;\r\n  const content = !(loading || error || !data) ? (\r\n    <View data={data} type={type} />\r\n  ) : null;\r\n\r\n  return (\r\n    <>\r\n      <img src={banner} alt=\"banner.\" />\r\n      <div className=\"data\">\r\n        {errorMessage}\r\n        {spinner}\r\n        {content}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst View = ({ data, type }) => {\r\n  if (type === \"comic\") {\r\n    const { title, description, language, pageCount, thumbnail, price } = data;\r\n    return (\r\n      <>\r\n        <img src={thumbnail} alt={title} />\r\n        <div className=\"data__text\">\r\n          <h1>{title}</h1>\r\n          <p>{description}</p>\r\n          <p>{pageCount}</p>\r\n          <p>Language: {language}</p>\r\n          <span>Price: {price}</span>\r\n        </div>\r\n        <NavLink to=\"/comics\">Back to all</NavLink>\r\n      </>\r\n    );\r\n  } else if (type === \"hero\") {\r\n    const { name, description, thumbnail, homepage, wiki, comics } = data;\r\n    return (\r\n      <>\r\n        <img src={thumbnail} alt={name} />\r\n        <div className=\"data__text\">\r\n          <h1>{name}</h1>\r\n          <p>{description}</p>\r\n          <div className=\"data__links\">\r\n            <a\r\n              href={homepage}\r\n              className=\"btn btn-red\"\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n            >\r\n              Homepage\r\n            </a>\r\n            <a\r\n              href={wiki}\r\n              className=\"btn btn--grey\"\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n            >\r\n              Wiki\r\n            </a>\r\n          </div>\r\n          <h3>Comics:</h3>\r\n          <ul>\r\n            {comics.length === 0 ? (\r\n              <li>No available comics for this hero</li>\r\n            ) : (\r\n              comics.map((item, i) => (\r\n                <NavLink\r\n                  to={`/comics/${item.resourceURI.match(/\\d+$/)[0]}`}\r\n                  key={i}\r\n                >\r\n                  {item.name}\r\n                </NavLink>\r\n              ))\r\n            )}\r\n          </ul>\r\n        </div>\r\n        <NavLink to=\"/\">Back</NavLink>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport default DataPage;\r\n","import { useCallback, useState } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = \"GET\",\r\n      body = null,\r\n      headers = { \"Content-Type\": \"application/json\" }\r\n    ) => {\r\n      setLoading(true);\r\n      try {\r\n        const response = await fetch(url, { method, headers, body });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`couldnt fetch ${url}, status ${response.status}`);\r\n        }\r\n\r\n        const data = response.json();\r\n\r\n        setLoading(false);\r\n        return data;\r\n        \r\n      } catch (e) {\r\n        setLoading(false);\r\n        setError(e.message);\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => setError(null), []);\r\n\r\n  return { loading, request, error, clearError };\r\n};\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { loading, error, request, clearError } = useHttp();\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const _apiKey = \"apikey=ff64a0784b5d6e42a6564ae4ba4b8975\";\r\n  const _baseOffset = 210;\r\n  const _comicsOffset = 50;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(\r\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformHero);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformHero(res.data.results[0]);\r\n  };\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`)\r\n    return _transformHero(res.data.results[0])\r\n  }\r\n\r\n  const _transformHero = (hero) => {\r\n    return {\r\n      id: hero.id,\r\n      name: hero.name,\r\n      description:\r\n        hero.description ||\r\n        \"unfortunatly, this hero still hasnt his own description...\",\r\n      thumbnail: hero.thumbnail.path + \".\" + hero.thumbnail.extension || '',\r\n      homepage: hero.urls[0].url,\r\n      wiki: hero.urls[1].url,\r\n      comics: hero.comics.items.slice(0, 10),\r\n    };\r\n  };\r\n\r\n  const getComicsId = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const getAllComics = async (offset = _comicsOffset) => {\r\n    const res = await request(\r\n      `${_apiBase}comics?&limit=8&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n      price: comics.prices.price\r\n        ? `${comics.prices[0].price}$`\r\n        : \"not available\",\r\n      language: comics.textObjects.language || \"en-us\",\r\n      pageCount: comics.pageCount ? `${comics.pageCount} p.` : \"No info\",\r\n      description: comics.description || \"No info\",\r\n    };\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    getCharacter,\r\n    getAllCharacters,\r\n    clearError,\r\n    getAllComics,\r\n    getComicsId,\r\n    getCharacterByName\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n"],"names":["View","_ref2","data","type","title","description","language","pageCount","thumbnail","price","_jsxs","_Fragment","children","_jsx","src","alt","className","NavLink","to","name","homepage","wiki","comics","href","target","rel","length","map","item","i","resourceURI","match","_ref","id","useParams","setData","useState","loading","error","getComicsId","getCharacter","clearError","useMarvelService","useEffect","updateData","onDataLoaded","then","catch","err","console","errorMessage","ErrorMessage","spinner","Spinner","content","banner","request","useHttp","setLoading","setError","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","Error","status","json","e","message","_apiBase","_apiKey","_transformHero","hero","path","extension","urls","items","slice","_transformComics","prices","textObjects","res","results","getAllCharacters","offset","getAllComics","getCharacterByName"],"sourceRoot":""}