{"version":3,"file":"static/js/478.92b0ea89.chunk.js","mappings":"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","sources":["components/comics/comics.js","components/pages/ComicsPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport banner from \"../../images/banner.jpg\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport ErrorMessage from \"../error/error\";\r\nimport Spinner from \"../spinner/spinner\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst ComicsList = () => {\r\n  const [comicsList, setComicsList] = useState([]);\r\n  const [offset, setOffset] = useState(50);\r\n  const [comicsEnded, setComicsEnded] = useState(false);\r\n  const [newItemLoading, setnewItemLoading] = useState(false);\r\n\r\n  const { loading, error, getAllComics } = useMarvelService();\r\n\r\n  useEffect(() => onRequest(offset), []);\r\n\r\n  const onRequest = (offset) => {\r\n    getAllComics(offset).then(onComicsListLoaded);\r\n  };\r\n\r\n  const onComicsListLoaded = (newComicsList) => {\r\n    let ended = false;\r\n    if (newComicsList.length < 8) {\r\n      ended = true;\r\n    }\r\n\r\n    setComicsList((comicsList) => [...comicsList, ...newComicsList]);\r\n    setnewItemLoading((newItemLoading) => newItemLoading = false);\r\n    setOffset((offset) => offset + 8);\r\n    setComicsEnded((comicsEnded) => comicsEnded = ended);\r\n  };\r\n\r\n  function renderItems(arr) {\r\n    const items = arr.map((item, i) => {\r\n      let imgStyle = { objectFit: \"cover\" };\r\n      if (\r\n        item.thumbnail ===\r\n        \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\r\n      ) {\r\n        imgStyle = { objectFit: \"unset\" };\r\n      }\r\n\r\n      return (\r\n        <li tabIndex={0} key={i}>\r\n          <NavLink to={`/comics/${item.id}`}>\r\n            <img src={item.thumbnail} alt={item.title} style={imgStyle} />\r\n            <p>{item.title}</p>\r\n            <span>{item.price}</span>\r\n          </NavLink>\r\n        </li>\r\n      );\r\n    });\r\n    return <ul>{items}</ul>;\r\n  }\r\n\r\n  const items = renderItems(comicsList);\r\n  const errorMessage = error ? <ErrorMessage /> : null;\r\n  const spinner = loading && !newItemLoading ? <Spinner /> : null;\r\n\r\n  return (\r\n    <>\r\n      <img src={banner} alt=\"comics banner.\" />\r\n      <div className=\"comics__choose\" data-comics-list>\r\n        {errorMessage}\r\n        {spinner}\r\n        {items}\r\n        <button\r\n          className=\"btn btn--long\"\r\n          disabled={newItemLoading}\r\n          style={{ display: comicsEnded ? \"none\" : \"flex\" }}\r\n          onClick={() => onRequest(offset)}\r\n        >\r\n          <div className=\"inner\">load more</div>\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ComicsList;\r\n","import ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport ComicsList from \"../comics/comics\";\r\n\r\nconst ComicsPage = () => {\r\n  return (\r\n    <>\r\n      <ErrorBoundary>\r\n        <ComicsList />\r\n      </ErrorBoundary>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ComicsPage","import { useCallback, useState } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = \"GET\",\r\n      body = null,\r\n      headers = { \"Content-Type\": \"application/json\" }\r\n    ) => {\r\n      setLoading(true);\r\n      try {\r\n        const response = await fetch(url, { method, headers, body });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`couldnt fetch ${url}, status ${response.status}`);\r\n        }\r\n\r\n        const data = response.json();\r\n\r\n        setLoading(false);\r\n        return data;\r\n        \r\n      } catch (e) {\r\n        setLoading(false);\r\n        setError(e.message);\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => setError(null), []);\r\n\r\n  return { loading, request, error, clearError };\r\n};\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { loading, error, request, clearError } = useHttp();\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const _apiKey = \"apikey=ff64a0784b5d6e42a6564ae4ba4b8975\";\r\n  const _baseOffset = 210;\r\n  const _comicsOffset = 50;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(\r\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformHero);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformHero(res.data.results[0]);\r\n  };\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`)\r\n    return _transformHero(res.data.results[0])\r\n  }\r\n\r\n  const _transformHero = (hero) => {\r\n    return {\r\n      id: hero.id,\r\n      name: hero.name,\r\n      description:\r\n        hero.description ||\r\n        \"unfortunatly, this hero still hasnt his own description...\",\r\n      thumbnail: hero.thumbnail.path + \".\" + hero.thumbnail.extension || '',\r\n      homepage: hero.urls[0].url,\r\n      wiki: hero.urls[1].url,\r\n      comics: hero.comics.items.slice(0, 10),\r\n    };\r\n  };\r\n\r\n  const getComicsId = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const getAllComics = async (offset = _comicsOffset) => {\r\n    const res = await request(\r\n      `${_apiBase}comics?&limit=8&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n      price: comics.prices.price\r\n        ? `${comics.prices[0].price}$`\r\n        : \"not available\",\r\n      language: comics.textObjects.language || \"en-us\",\r\n      pageCount: comics.pageCount ? `${comics.pageCount} p.` : \"No info\",\r\n      description: comics.description || \"No info\",\r\n    };\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    getCharacter,\r\n    getAllCharacters,\r\n    clearError,\r\n    getAllComics,\r\n    getComicsId,\r\n    getCharacterByName\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n"],"names":["ComicsList","comicsList","setComicsList","useState","offset","setOffset","comicsEnded","setComicsEnded","newItemLoading","setnewItemLoading","loading","error","getAllComics","useMarvelService","useEffect","onRequest","then","onComicsListLoaded","newComicsList","ended","length","items","arr","map","item","i","imgStyle","objectFit","thumbnail","_jsx","tabIndex","children","_jsxs","NavLink","to","id","src","alt","title","style","price","renderItems","errorMessage","ErrorMessage","spinner","Spinner","_Fragment","banner","className","disabled","display","onClick","ComicsPage","ErrorBoundary","request","clearError","useHttp","setLoading","setError","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","_apiBase","_apiKey","_transformHero","hero","name","description","path","extension","homepage","urls","wiki","comics","slice","_transformComics","prices","language","textObjects","pageCount","getCharacter","res","results","getAllCharacters","getComicsId","getCharacterByName"],"sourceRoot":""}